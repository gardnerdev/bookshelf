version: '3.4'
services:
  # frontend:
  #   image: frontend:prod
  #   build: 
  #     context: ./frontend/
  #     dockerfile: Dockerfile
  #     network: host
  #   command: ["npm", "run", "ng", "serve", "--configuration development"]
  #   container_name: frontend
  #   network_mode: host
  #   depends_on:
  #     - "backend"
  # backend:
  #   image: backend:prod
  #   build: 
  #     context: ./backend/
  #     dockerfile: Dockerfile
  #     network: host
  #   network_mode: host
  #   env_file: .env
  #   environment:
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_USER: ${POSTGRES_USER}
  #   container_name: backend
  #   depends_on:
  #     - postgres
  #   command: [] 
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  postgres:
    image: postgres:11.2-alpine
    user: ${POSTGRES_UID}:${POSTGRES_GID}
    container_name: pg_container 
    env_file: .env
    network_mode: host
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./db/init-db.sql:/docker-entrypoint-initdb.d/init.sql
      - type: bind
        source: ./volumes/postgresql
        target: /var/lib/postgresql/pgdata
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:4.18
    env_file: .env
    network_mode: host
    environment:
      POSTGRES_PASSWORD: ${PGADMIN_DEFAULT_EMAIL}
      POSTGRES_USER: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_LISTEN_PORT}
    restart: always
    depends_on:
      - postgres
    volumes:
      - type: bind
        source: ./volumes/pgadmin
        target: /var/lib/pgadmin



